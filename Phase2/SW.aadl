package SW
public

	with Data_Model;
	with Base_Types;
	with CASE_Properties;
	with CASE_Model_Transformations;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		-- This is the structure to hold the lat/long/alt values of a coordinate
		subcomponents
			latitude: data Base_Types::Integer;
			longitude: data Base_Types::Integer;
			altitude: data Base_Types::Integer;
	end Coordinate.Impl;

	data Map
		-- The Map is a structure that contains a list of coordinates that encircle a
		-- region.  
		-- In this implementation, we fix the size of the map to 4 waypoints
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end Map;

	data MapArray
		-- The MapArray is a structure that hold multiple Maps
		-- In this implementation, we fix the size of the map array to 5 maps
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Map));
			Data_Model::Dimension => (5);
	end MapArray;

	data FlightPattern
		-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
		-- sensing region to conduct surveillance.
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
	end FlightPattern;

	data implementation FlightPattern.Impl
	end FlightPattern.Impl;

	data Command
	end Command;

	data implementation Command.Impl
		-- The Command structure contains data that the Ground Station passes to the UAV.
		-- It contains a message header, Map and Flight Pattern.
		subcomponents
			map: data Map;
			pattern: data FlightPattern;
	end Command.Impl;

	data RF_Msg extends CASE_Model_Transformations::CASE_RF_Msg
	end RF_Msg;

	data implementation RF_Msg.Impl extends CASE_Model_Transformations::CASE_RF_Msg.Impl
		subcomponents
			payload: refined to data Command.Impl;
	end RF_Msg.Impl;

	data Mission
		-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
		-- Map and Flight Pattern.
		-- For this implementation, we fix the size of the Mission to 10 waypoints.
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (10);
	end Mission;

	data MissionWindow
		-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from the Mission.
		-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end MissionWindow;

	thread WifiDriver
		-- The WifiDriver is the software that enables other SW components to communicate to other systems over WiFi
		features
			gimbal_command: in event data port;
			send_data: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			recv_data: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
	end WifiDriver;

	thread implementation WifiDriver.Impl
	end WifiDriver.Impl;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			mission_command: out event data port RF_Msg.Impl; -- {Achilles::Role=>(EntryPoint);}; -- annotated by Joanna in commit e62b0ae
			status: in event data port Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => COMM_DRIVER; 
	end RadioDriver;

	thread implementation RadioDriver.Impl
	end RadioDriver.Impl;

	thread FlightPlanner
		-- The FlightPlanner is an abstraction for UxAS.
		-- It accepts a command message containing a map and flight pattern, and generates a mission.
		-- The FlightPlanner also has access to a No-Fly zone database, which it uses to generate the mission 
		-- to avoid specified no-fly zones
		features
			flight_plan: out data port Mission;
			recv_map: in event data port RF_Msg.Impl ; -- {Achilles::Role=>(ValidationTarget);}; -- annotated by Joanna in commit e62b0ae
			request_nofly_zones: out event data port Map;
			nofly_zones: in event data port MapArray;
			position_status: in event data port Coordinate.Impl; 
	end FlightPlanner;

	thread implementation FlightPlanner.Impl
	end FlightPlanner.Impl;

	thread NoFlyZoneDatabase
		-- The NoFlyZoneDatabase is a collection of polygons that represent areas on a map which the UAV should avoid.
		-- The database is populated at build-time and stored in memory.
		-- When provided a map of a region, it will return all no-fly areas within that region.
		features
			map: in event data port Map;
			zones: out event data port MapArray;
	end NoFlyZoneDatabase;

	thread implementation NoFlyZoneDatabase.Impl
	end NoFlyZoneDatabase.Impl;

	thread WaypointManager
		-- The WaypointManager divides a mission into a small window of waypoints suitable for the FlightController.
		-- Because the FlightController can only process a small number of waypoints at a time, the WaypointManager
		-- creates these mission windows in response to the current position of the UAV, provided by the FlightController GPS.
		features
			flight_plan: in data port Mission;
			mission_window: out event data port MissionWindow;
			position_status: in event data port Coordinate.Impl;
	end WaypointManager;

	thread implementation WaypointManager.Impl
	end WaypointManager.Impl;

	thread CameraManager
		-- The CameraManager determines the gimbal settings for the onboard camera based on the current position of the UAV and the mission.
		-- The CameraManager then sends out gimbal commands to the camera over the wifi connection
		features
			flight_plan: in data port Mission;
			position_status: in event data port Coordinate.Impl;
			gimbal_command: out event data port;
	end CameraManager;

	thread implementation CameraManager.Impl
	end CameraManager.Impl;

	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			status: out event data port Coordinate.Impl;
			mission_window: in event data port MissionWindow;
			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
	end UARTDriver;

	thread implementation UARTDriver.Impl
	end UARTDriver.Impl;

	process SW
		-- The Mission Computer Software process runs all threads
		features
			radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl; -- single port annotation
			radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl; --  {Achilles::Role=>(EntryPoint);}; -- single port annotation
			uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			wifi_recv: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl ; --{Achilles::Role=>(EntryPoint);}; -- single port annotation
			wifi_send: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
		-- Uncomment to mark all input ports with EntryPoint Role
-- 		properties
--			 Achilles::Role=>(EntryPoint);
	end SW;

	process implementation SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			FPLN: thread FlightPlanner.Impl; 
			WPM: thread WaypointManager.Impl;
			CM: thread CameraManager.Impl;
			UART: thread UARTDriver.Impl ; 
			WIFI: thread WifiDriver.Impl; 
			NFDB: thread NoFlyZoneDatabase.Impl;
		connections
			c1: port radio_recv -> RADIO.recv_data;
			c2: port RADIO.send_data -> radio_send;
			c3: port RADIO.mission_command -> FPLN.recv_map;
			c5: port FPLN.flight_plan -> WPM.flight_plan;
			c6: port FPLN.request_nofly_zones -> NFDB.map;
			c7: port NFDB.zones -> FPLN.nofly_zones;
			c8: port WPM.mission_window -> UART.mission_window;
			c9: port UART.status -> WPM.position_status;
			c10: port UART.status -> FPLN.position_status;
			c11: port UART.status -> RADIO.status;
			c12: port UART.send_data -> uart_send;
			c13: port uart_recv -> UART.recv_data;
			c14: port FPLN.flight_plan -> CM.flight_plan;
			c15: port UART.status -> CM.position_status;
			c16: port CM.gimbal_command -> WIFI.gimbal_command;
			c17: port WIFI.send_data -> wifi_send;
			c18: port wifi_recv -> WIFI.recv_data;
	end SW.Impl;
	
	system SWS
	end SWS;

	system implementation SWS.Impl
		subcomponents
			SW: process SW::SW.Impl;
	end SWS.Impl;
	
end SW;